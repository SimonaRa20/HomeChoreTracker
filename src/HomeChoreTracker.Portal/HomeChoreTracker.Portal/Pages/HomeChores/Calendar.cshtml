@page "{id:int}"
@using HomeChoreTracker.Portal.Constants
@model HomeChoreTracker.Portal.Pages.HomeChores.CalendarModel
@section HeadContent
{
	<title>@ViewData["Title"] - Home Chore Tracker</title>
	<link href="~/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" asp-append-version="true">
	<link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
		  rel="stylesheet" asp-append-version="true">
	<link href="~/css/sb-admin-2.min.css" rel="stylesheet" asp-append-version="true">
	<!-- Add the following lines to include required Bootstrap and jQuery files -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

	<link href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.css" rel='stylesheet' />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.27.0/moment.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.27.0/moment.min.js"></script>
	<style>

		.circle {
			display: inline-block;
			justify-content: center;
			align-items: center;
			width: 32px;
			height: 32px;
			border-radius: 50%;
			background-color: white;
			color: black;
			text-align: center;
			font-weight: bold;
		}


		.event-details {
			display: inline-block;
			vertical-align: middle;
			margin-left: 5px;
		}

		.event-time,
		.event-title {
			display: block;
		}

	</style>
}

@if (!User.Identity.IsAuthenticated)
{
	Response.Redirect("/Auth/Login");
}
else if (User.IsInRole("User"))
{
	<div class="row">
		<div class="col-lg-12">
			<a class="btn btn-light btn-sm mb-2" href="/HomeChores/@Model.Id"><i class="fa fa-clone mr-2" aria-hidden="true"></i>Home chores</a>
			<a class="btn btn-light btn-sm mb-2" asp-page="./Create" asp-route-id="@Model.Id"><i class="fa fa-plus-circle mr-2" aria-hidden="true"></i>Create</a>
			<a class="btn btn-light btn-sm mb-2" asp-page="./AddHomeChoreFromDefaultList" asp-route-id="@Model.Id"><i class="fa fa-list mr-2" aria-hidden="true"></i>Add Home Chore From Default List</a>
			<a class="btn btn-secondary btn-sm mb-2" asp-page="./Calendar" asp-route-id="@Model.Id"><i class="fa fa-calendar mr-2" aria-hidden="true"></i>Home Calendar</a>

			<div class="card mb-4 py-3 border-left-primary">
				@if (Model.Unauthorized)
				{
					<div class="collapse show">
						<div class="card-body">
							<p>You don't have permission to view this content.</p>
						</div>
					</div>
				}
				else
				{
					<a class='btn btn-sm mb-4' id='btnSystemAssign' data-toggle="modal" data-target="#SystemAssignModal-@Model.Id"><i class="fa fa-clone mr-2" aria-hidden="true"></i>Assign tasks randomly</a>
					<div class="modal" tabindex="-1" role="dialog" id="SystemAssignModal-@Model.Id">
						<div class="modal-dialog" role="document">
							<div class="modal-content">
								<div class="modal-header">
									<h5 class="modal-title">Assigned Confirmation</h5>
									<button type="button" class="close" data-dismiss="modal" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
								<form method="post" asp-page-handler="SystemAssign" asp-route-taskId="@Model.Id">
									<div class="modal-body">
										<p>Are you sure you want to let the system assign home chores?</p>
										<p>When we divide the home chores, do you want us to take into account (add checks if you want):</p>

										<div class="form-check ml-2">
											<input type="checkbox" class="form-check-input" id="googleCheck" name="googleCheck" />
											<label class="form-check-label" for="googleCheck">Google events time</label>
										</div>

										<div class="form-check ml-2">
											<input type="checkbox" class="form-check-input" id="busyIntervalCheck" name="busyIntervalCheck" />
											<label class="form-check-label" for="busyIntervalCheck">Busy intervals time</label>
										</div>

										<div class="form-check ml-2">
											<input type="checkbox" class="form-check-input" id="assignedHomeChoresCheck" name="assignedHomeChoresCheck" />
											<label class="form-check-label" for="assignedHomeChoresCheck">Assigned home chores time</label>
										</div>
									</div>

									@if (!string.IsNullOrEmpty(TempData["ErrorSystemMessage"] as string))
									{
										<div class="alert alert-danger" role="alert">
											@TempData["ErrorSystemMessage"]
										</div>
									}

									<div class="modal-footer">
										<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>

										<input type="hidden" id="editHomeId" name="homeId" value="@Model.Id" />
										<button type="submit" class="btn btn-primary">Assign</button>

									</div>
								</form>
							</div>
						</div>
					</div>

					<div class="container-fluid">
						<div class="row justify-content-center">
							<div style="margin-top: 8px; margin-bottom: 8px;">
								<form method="get" id="filterForm" class="form-inline">
									<div class="form-group mr-2">
										<label for="userId" class="mr-2">Filter by User:</label>
										<select class="form-select form-select-sm" id="userId" name="userId">
											<option value="">All</option>
											@foreach (var member in Model.HomeMembers)
											{
												<option value="@member.HomeMemberId" selected="@(member.HomeMemberId == Model.HomeMemberId)">@member.UserName</option>
											}
										</select>
									</div>

									<div class="form-group mr-2">
										<label for="choreType" class="mr-2">Filter by Chore Type:</label>
										<select class="form-select form-select-sm" id="choreType" name="choreType">
											<option value="" selected="@(Model.HomeChoreType == "")">All</option>
											<option value="Cleaning" selected="@(Model.HomeChoreType == "Cleaning")">Cleaning</option>
											<option value="Laundry" selected="@(Model.HomeChoreType == "Laundry")">Laundry</option>
											<option value="Kitchen" selected="@(Model.HomeChoreType == "Kitchen")">Kitchen</option>
											<option value="Bathroom" selected="@(Model.HomeChoreType == "Bathroom")">Bathroom</option>
											<option value="Bedroom" selected="@(Model.HomeChoreType == "Bedroom")">Bedroom</option>
											<option value="Outdoors" selected="@(Model.HomeChoreType == "Outdoors")">Outdoors</option>
											<option value="Organize" selected="@(Model.HomeChoreType == "Organize")">Organize</option>
											<option value="Other" selected="@(Model.HomeChoreType == "Other")">Other</option>
										</select>
									</div>

									<button type="submit" class="btn btn-outline-info btn-sm">Apply Filters</button>
								</form>
							</div>
						</div>
					</div>


					<div id="calendar" style="margin-left:4px"></div>
				}
			</div>
		</div>
	</div>
}
else
{
	<div class="row">
		<div class="col-lg-12">
			<div class="card mb-4 py-3 border-left-primary">
				<div class="collapse show">
					<div class="card-body">
						<p>You don't have permission to view this content.</p>
					</div>
				</div>
			</div>
		</div>
	</div>
}

<div id="myModal" class="modal fade">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Home chore details</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<p>Task Name: <span id="task-name"></span></p>
				<p>Description: <span id="task-description"></span></p>
				<p>Type: <span id="task-type"></span></p>
				<p>Long Type: <span id="task-long-type"></span></p>
				<p>Assigned member: <span id="task-assigned"></span></p>
				<div id="vote-to-selection">
					<p>Total votes: <span id="task-totalVotes"></span> (if half of the household members agree, assigned user receive a penalty of -10 points)</p>
					<p class="mb-1">Vote if the task was not done well</p>
					<form method="post" asp-page-handler="Vote" class="d-inline">
						<button type="submit" class="btn btn-success mx-1">Vote</button>
						<input type="hidden" id="homeId" name="homeId" value="@Model.Id" />
						<input type="hidden" id="vote" name="vote" value="1">
						<input type="hidden" id="task-id" name="taskId" value="" />
					</form>
					<form method="post" asp-page-handler="Vote" class="d-inline">
						<button type="submit" class="btn btn-primary mx-1">Clean vote</button>
						<input type="hidden" id="homeId" name="homeId" value="@Model.Id" />
						<input type="hidden" id="vote" name="vote" value="0">
						<input type="hidden" id="task-id" name="taskId" value="" />
					</form>
				</div>
				<div id="assign-to-selection">
					<form id="assign-person-form" method="post">
						<input type="hidden" id="homeId" name="homeId" value="@Model.Id" />
						<input type="hidden" id="chosen-task-id" name="taskId" value="" />
						<div class="form-group">
							<label for="assigned-person">Assign To:</label>
							<select class="form-control" id="assigned-person" name="AssignedHomeMember.HomeMemberId">
								<option value="">Unassigned</option>
								@foreach (var member in Model.HomeMembers)
								{
									<option value="@member.HomeMemberId">@member.UserName</option>
								}
							</select>
						</div>
						@if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
						{
							<div class="alert alert-danger" role="alert">
								@TempData["ErrorMessage"]
							</div>
						}

						<button type="submit" class="btn btn-primary">Save</button>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>


@{
	var userColors = new string[] { "#FAEDCB", "#C9E4DE", "#C6DEF1", "#DBCDF0", "#F2C6DE", "#F8F3E8", "#E6F8F6", "#F8DBB8", "#CDE8E6", "F6C7B3", "5B96A9" };
	var assignedUsers = Model.HomeChoreResponse.Select(c => c.HomeMemberId).Distinct().Where(id => id != null).ToList();
	Dictionary<string, string> userColorMap = new Dictionary<string, string>();

	for (int i = 0; i < assignedUsers.Count; i++)
	{
		string userKey = assignedUsers[i].ToString();
		userColorMap.Add(userKey, userColors[i % userColors.Length]);
	}
}
<script>
	$(function () {
		var errorMessage = '@TempData["ErrorMessage"]';
		if (errorMessage !== "") {
			// Show the modal here
			$('#myModal').modal('show');
		}

		var errorSystemMessage = '@TempData["ErrorSystemMessage"]';
		if (errorSystemMessage !== "") {
			// Show the modal here
			$('#SystemAssignModal - @Model.Id').modal('show');
		}
		

		$('#calendar').fullCalendar({
			defaultView: 'month',
			firstDay: 1,
			events: [
	@foreach (var chore in Model.HomeChoreResponse)
	{
		<text>
					{
						id: @chore.Id,
						title: '@chore.Task.Name',
						name: '@chore.Task.Name',
						description: '@chore.Task.Description',
						start: '@chore.StartDate.ToString("yyyy-MM-ddTHH:mm:ss")',
						end: '@chore.EndDate.ToString("yyyy-MM-ddTHH:mm:ss")',
						type: '@chore.Task.ChoreType',
						time: '@chore.Task.Time',
						assigned: '@chore.HomeMemberId',
						color: '@(chore.HomeMemberId == null ? "#4e73df" : userColorMap.GetValueOrDefault(chore.HomeMemberId.ToString(), "#4e73df"))',
						textColor: '@(chore.HomeMemberId == null ? "white" : "black")',
						isDone: '@chore.IsDone',
						votes: '@chore.TotalVotes'
					},
		</text>
	}
					],
			eventRender: function (event, element) {
				var assignedMemberId = event.assigned;
				var assignedMemberInitials = '';

				if (assignedMemberId == '') {
					assignedMemberInitials = '-';
				} else {
					var homeMembersData = @Html.Raw(Json.Serialize(Model.HomeMembers));
					var assignedMember = homeMembersData.find(member => member.homeMemberId == assignedMemberId);
					if (assignedMember && assignedMember.image) {
						assignedMemberInitials = `<img src="data:image/png;base64,${assignedMember.image}" class="rounded-circle align-middle" style="width: 32px; height: 32px;">`;
					} else {
						assignedMemberInitials = ` <i class="fas fa-user fa-lg mt-2 text-gray-400"  style="width: 32px; height: 32px;"></i>`;
					}
				}

				var startTime = moment(event.start._i).format('HH:mm');
				element.css('background-color', event.color);
				element.css('opacity', '0.8');

				if (assignedMemberInitials == '-') {
					var eventText = '<div class="fc-content">' +
						'<div class="event-details">' +
						'<span class="event-time">' + startTime + '</span>' +
						'<span class="event-title">' + event.title + '</span>' +
						'</div>' +
						'</div>';
					element.css('min-height', '16px');
				} else {
					var eventText = '<div class="fc-content">' +
						'<div class="circle">' + assignedMemberInitials + '</div>' +
						'<div class="event-details">' +
						'<span class="event-time">' + startTime + '</span>' +
						'<span class="event-title">' + event.title + '</span>' +
						'</div>' +
						'</div>';
				}

				element.css('min-height', '16px');
				element.find('.fc-time').remove();
				element.find('.fc-title').remove();
				element.append(eventText);
			},


			eventClick: function (calEvent, jsEvent, view) {
				var userId = @Html.Raw(Json.Serialize(Model.UserId));
				if (calEvent.isDone === 'True') {

					if (userId != calEvent.assigned) {
						$('#assign-to-selection').hide();
						$('#vote-to-selection').show();
					}
					else {
						$('#assign-to-selection').hide();
						$('#vote-to-selection').hide();
					}

				} else {
					$('#assign-to-selection').show();
					$('#vote-to-selection').hide();
				}


				// Show the modal here
				$('#myModal').modal('show');

				var task = calEvent.task;
				$('#event-id').text(calEvent.id);
				$('#task-name').text(calEvent.name);
				$('#task-description').text(calEvent.description);
				$('#task-type').text(calEvent.type);
				$('#task-long-type').text(calEvent.time);
				$('#task-isDone').text(calEvent.isDone);
				$('#task-totalVotes').text(calEvent.votes);
				$('#vote-to-selection form').find('input[name="taskId"]').val(calEvent.id);
				var assignedMemberId = calEvent.assigned;
				var assignedMemberName = '';

				if (assignedMemberId == '') {
					assignedMemberName = '-';
				}
				else {
					var assignedMemberName = '';
					var homeMembersData = @Html.Raw(Json.Serialize(Model.HomeMembers));
					for (var i = 0; i < homeMembersData.length; i++) {
						if (homeMembersData[i].homeMemberId == assignedMemberId) {

							assignedMemberName = homeMembersData[i].userName;
							break;
						}
					}
				}

				$('#task-assigned').text(assignedMemberName);
				$('#assigned-person').val(assignedMemberId);
				$('#task-id').val(calEvent.id);
				$('#chosen-task-id').val(calEvent.id);
			}

		});
	});
</script>
<style>
	.form-check-input[type=checkbox] {
		appearance: none;
		-webkit-appearance: none;
		-moz-appearance: none;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		border: 2px solid #ccc;
		outline: none;
		cursor: pointer;
		transition: background-color 0.3s;
		position: relative;
		vertical-align: middle;
	}

		.form-check-input[type=checkbox]::before {
			content: "";
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			width: 20px;
			height: 20px;
			background-color: transparent;
			border-radius: 50%;
			transition: background-color 0.3s;
		}

		.form-check-input[type=checkbox]:checked::before {
			background-color: #007bff;
		}

		.form-check-input[type=checkbox]:checked::after {
			content: "\2713";
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			color: #fff;
			font-size: 16px;
		}

	.form-check-label {
		margin-left: 5px;
		vertical-align: middle;
	}

	
</style>